services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - kafka-net

  kafka:
    image: confluentinc/cp-kafka:latest
    restart: unless-stopped
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - kafka-net

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8081:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schema-registry:8081
    depends_on:
      - kafka
    networks:
      - kafka-net

  producer_1:
    build:
      context: ./producer_1
    depends_on:
      - kafka
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      PRODUCER_CLIENT_ID: producer_1
      SCHEMA_REGISTRY_URL: http://schema-registry:8081
      PRODUCER_ACKS: all
      PRODUCER_COMPRESSION: zstd
      PRODUCER_LINGER_MS: 50
    env_file:
      - ./.env 
    volumes:
      - ./schemas:/app/schemas
    restart: on-failure
    networks:
      - kafka-net

  producer_2:
    build:
      context: ./producer_2
    depends_on:
      - kafka
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      PRODUCER_CLIENT_ID: producer_2
      SCHEMA_REGISTRY_URL: http://schema-registry:8081
      PRODUCER_ACKS: all
      PRODUCER_COMPRESSION: zstd
      PRODUCER_LINGER_MS: 50
    env_file:
      - ./.env 
    volumes:
      - ./schemas:/app/schemas
    restart: on-failure
    networks:
      - kafka-net
      
  init-topics:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - kafka
    entrypoint: /bin/bash
    command: >
      -c '
      echo "Wait for broker...";
      while ! kafka-topics --bootstrap-server kafka:9092 --list > /dev/null 2>&1; do
        echo "Kafka is not ready yet. wait for 5s...";
        sleep 5;
      done;
      echo "Kafka is ready. Create topic...";

      kafka-topics --bootstrap-server kafka:9092 \
        --create --if-not-exists \
        --replication-factor 1 \
        --partitions 3 \
        --config retention.ms=604800000 \
        --config segment.bytes=262144000 \
        --topic raw_offers;
      echo "Topic is ready.";
      '
    networks:
      - kafka-net
    restart: on-failure

  schema-registry:
    image: confluentinc/cp-schema-registry:7.5.0
    ports:
      - "8090:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:9092
    depends_on:
      - kafka
    networks:
      - kafka-net

  consumer:
    build:
      context: ./consumer
      dockerfile: dockerfile
    depends_on:
      - kafka
      - init-topics
    environment:
      - PYTHONPATH=/app
      - MONGO_URI=${MONGO_URI}
      - KAFKA_BOOTSTRAP_SERVERS_COMMON=kafka:9092
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,PLAINTEXT://localhost:9092
    volumes:
      - ./schemas:/app/schemas
      - .:/app
    networks:
      - kafka-net
    env_file:
      - .env
    restart: unless-stopped
    command: >
      sh -c "
        echo 'Wait for Kafka on port 9092...';
        while ! nc -z kafka 9092; do sleep 2; done;
        echo 'Kafka is ready â€“ consumer starting';
        python consumer/consumer_main.py
      "
        
  biweekly-task:
    build: ./statement
    container_name: biweekly-task
    env_file:
      - .env
    restart: unless-stopped
    environment:
      - MONGO_URI=${MONGO_URI}
      - EMAIL_SMTP=${EMAIL_SMTP}
      - EMAIL_SENDER=${EMAIL_SENDER}
      - EMAIL_RECIEVER=${EMAIL_RECIEVER}
      - EMAIL_SENDER_PASSWORD=${EMAIL_SENDER_PASSWORD}
    volumes:
      - ./statement:/app
      - ./log:/var/log
    networks:
      - kafka-net

networks:
  kafka-net:
